import asyncio

from random import randint, choice
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from decouple import config

from models import User, Support

API_TOKEN = config('TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


class UserSupport(StatesGroup):
    message = State()
    dialog = State()



mainmenu = InlineKeyboardBuilder()
mainmenu.row(types.InlineKeyboardButton(text = 'üé≤ –†–∞–Ω–¥–æ–º–Ω–µ —á–∏—Å–ª–æ', callback_data='random'))
mainmenu.row(types.InlineKeyboardButton(text = 'üÜò –î–æ–ø–æ–º–æ–≥–∞', callback_data='help'))

back_mainmenu = InlineKeyboardBuilder()
back_mainmenu_button = types.InlineKeyboardButton(text = '‚¨Ö –ù–∞–∑–∞–¥ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='back_mainmenu')
back_mainmenu.row(back_mainmenu_button)






@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user = User.get_or_none(id=message.from_user.id)
    if user:
        await message.answer('–í—ñ—Ç–∞—é —â–µ —Ä–∞–∑', reply_markup=mainmenu.as_markup())
    else:
        User.create(id=message.from_user.id, full_name=message.from_user.full_name)
        await message.answer('–í—ñ—Ç–∞—é, –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å', reply_markup=mainmenu.as_markup())
    
@dp.callback_query(F.data == "back_mainmenu")
async def back_mainmenu2(call: types.CallbackQuery):
    await call.message.edit_text('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=mainmenu.as_markup())
    
@dp.callback_query(F.data == "random")
async def random(call: types.CallbackQuery):
    await call.message.edit_text(f'–†–∞–Ω–¥–æ–º–Ω–µ —á–∏—Å–ª–æ: {randint(0, 100)}', reply_markup=back_mainmenu.as_markup())


@dp.message(Command('admin'))
async def cmd_admin(message: types.Message, command: CommandObject):
    user = User.get_or_none(id=message.from_user.id)
    if not user:
        return
    password = '123456'
    args = command.args
    if password == args:
        if user.is_admin:
            await message.answer('–í–∏ –≤–∂–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä')
        else:
            user.is_admin = True
            user.save()
            await message.answer('–í–∏ —Å—Ç–∞–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    
@dp.message(Command('admin_clear'))
async def cmd_admin_clear(message: types.Message):
    user = User.get_or_none(id=message.from_user.id)
    if not user:
        return
    if not user.is_admin:
        return
    admins = User.filter(is_admin=True)
    for admin in admins:
        admin.is_admin = False
        admin.save()
    await message.answer('–í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤')



@dp.callback_query(F.data == "help")
async def help(call: types.CallbackQuery, state: FSMContext):
    await state.set_state( UserSupport.message )
    await call.message.edit_text('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º')
    
@dp.message(UserSupport.message)
async def message_form_user(message: types.Message, state: FSMContext):
    admins = User.filter(is_admin=True)
    admin = choice(admins)
    support = Support.create(user=message.from_user.id, admin=admin.id, text=message.text)

    await message.answer(f'–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –î–æ –≤–∞—Å –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä {admin.full_name}')
    await state.set_state( UserSupport.dialog )
    await state.update_data(support_id=support.id, admin_id=admin.id, client_id=message.from_user.id)
    
    #–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    answer = InlineKeyboardBuilder()
    answer.row(types.InlineKeyboardButton(text = '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏', callback_data=f'support_answer_{support.id}'))
    await bot.send_message(admin.id, f'–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.full_name}', reply_markup=answer.as_markup())

@dp.callback_query(F.data.startswith("support_answer_"))
async def support_answer(call: types.CallbackQuery, state: FSMContext):
    support_id = call.data.split('_')[-1]
    support = Support.get_or_none(id=support_id)
    if not support:
        await call.message.edit_text('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
        return
    await state.set_state( UserSupport.dialog )
    await state.update_data(support_id=support.id, admin_id=support.admin.id, client_id=support.user.id)
    await call.message.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {support.user.full_name}:\n{support.text}')
    await call.message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
    
    #–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await bot.send_message(support.user.id, '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –¥—ñ–∞–ª–æ–≥—É')


@dp.message(UserSupport.dialog)
async def support_dialog(message: types.Message, state: FSMContext):
    data = await state.get_data()
    support_id = data.get('support_id')
    admin_id = data.get('admin_id')
    client_id = data.get('client_id')
    support = Support.get_or_none(id=support_id)
    if not support or support.is_closed:
        await message.answer('–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
        return
    
    print(f'message from {message.from_user.id} msg: {message.text}')
    print(f'admin: {admin_id}', f'client: {client_id}', f'support _admin: {support.admin.id}')
    
    exit_markup = InlineKeyboardBuilder()
    exit_markup.row(types.InlineKeyboardButton(text = '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥', callback_data=f'support_exit'))
    
    if message.from_user.id == admin_id:
        await bot.copy_message(client_id, message.chat.id, message.message_id, reply_markup=exit_markup.as_markup())
    else:
        await bot.copy_message(admin_id, message.chat.id, message.message_id, reply_markup=exit_markup.as_markup())

@dp.callback_query(F.data.startswith("support_exit"))
async def support_exit(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    support_id = data.get('support_id')
    support = Support.get_or_none(id=support_id)
    if not support:
        await call.message.edit_text('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
        return
    
    support.is_closed = True
    support.save()
    
    —Ålose_markup = InlineKeyboardBuilder()
    —Ålose_markup.row(types.InlineKeyboardButton(text = '‚¨Ö –ù–∞–∑–∞–¥ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data=f'support_close'))
    
    await bot.send_message(support.user.id, '–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', reply_markup=—Ålose_markup.as_markup())
    await bot.send_message(support.admin.id, '–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', reply_markup=—Ålose_markup.as_markup())

@dp.callback_query(F.data == "support_close", UserSupport.dialog)
async def support_close(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=mainmenu.as_markup())


if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot, skip_updates=True))